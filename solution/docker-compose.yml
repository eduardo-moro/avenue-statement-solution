version: '3.8'

services:
  mongo:
    build: ./infra/mongo
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    build: ./infra/postgres
    container_name: postgres
    environment:
      POSTGRES_DB: avenue_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    build: ./infra/rabbitmq
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    build: ./infra/nginx
    container_name: nginx
    ports:
      - "8080:80"
    depends_on:
      api-read:
        condition: service_healthy
      api-write:
        condition: service_healthy
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf

  api-read:
    build:
      context: .
      dockerfile: ./services/api-read/Dockerfile
    container_name: api-read
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DATABASE_URL: "host=postgres user=user password=password dbname=avenue_db port=5432 sslmode=disable"
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  api-write:
    build:
      context: .
      dockerfile: ./services/api-write/Dockerfile
    container_name: api-write
    ports:
      - "8082:8080"
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      MONGO_URL: "mongodb://mongo:27017"
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  client-tui:
    build:
      context: .
      dockerfile: ./services/client-tui/Dockerfile
    container_name: client-tui
    depends_on:
      api-read:
        condition: service_healthy
      api-write:
        condition: service_healthy
    environment:
      API_READ_URL: "http://api-read:8080"
      API_WRITE_URL: "http://api-write:8080"

volumes:
  mongo_data:
  postgres_data:
